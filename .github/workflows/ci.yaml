name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: 'Build and Push'
    runs-on: ${{ matrix.os }}
    outputs:
      docker_tag: ${{ steps.generate_tag.outputs.sha }}
    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn

      - name: Running Tests
        run: yarn test

      - name: Generate Tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Generated tag: $SHA"

      - name: Login into the Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t joaovitormlbr/deploy-digital-ocean-aula-ci:${{ steps.generate_tag.outputs.sha }} .

      - name: Push Docker Image to DockerHub
        run: docker push joaovitormlbr/deploy-digital-ocean-aula-ci:${{ steps.generate_tag.outputs.sha }}

  deploy:
    name: Deploy on Digital Ocean
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Copy docker-compose file via ssh
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          source: "./docker-compose.yaml"
          target: "~/"

      - name: Deploy on Digital Ocean via ssh 
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Recupera a tag gerada no job build
            TAG="${{ needs.build.outputs.docker_tag }}"
            echo "TAG utilizada: $TAG"
            
            # Cria o arquivo .env com a variável DOCKER_IMAGE_TAG
            [ -e .env ] && rm .env
            echo "DOCKER_IMAGE_TAG=$TAG" > .env

            # Login no Docker
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # Para containers em execução, se existirem
            CONTAINERS=$(docker ps -q)
            if [ -n "$CONTAINERS" ]; then
              docker stop $CONTAINERS
            else
              echo "No running containers"
            fi

            # Remove containers parados, se existirem
            CONTAINERS=$(docker ps -a -q)
            if [ -n "$CONTAINERS" ]; then
              docker rm $CONTAINERS
            else
              echo "No containers to remove"
            fi

            # Executa o docker-compose para subir os containers com a nova imagem
            docker-compose up -d --build